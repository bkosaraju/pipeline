/*
 *   Copyright (C) 2019-2020 bkosaraju
 *   All Rights Reserved.
 *
 *   Licensed to the Apache Software Foundation (ASF) under one
 *   or more contributor license agreements.  See the NOTICE file
 *   distributed with this work for additional information
 *   regarding copyright ownership.  The ASF licenses this file
 *   to you under the Apache License, Version 2.0 (the
 *   "License"); you may not use this file except in compliance
 *   with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

buildscript {
    ext.scalaVariant = "2.12"
    ext.sparkVersion = "3.0.0"
    ext.prometheusVersion = "0.9.0"
    ext.awsSDKVersion = "1.11.721"
    ext.utilsVersion = "1.02"

    repositories {
        maven {
            url "${gradle.artifactoryUrl}"
            if (System.getenv("ARTIFACTORY_USER") || Project.hasProperty('artifactoryUser')) {
                credentials {
                    username = System.getenv("ARTIFACTORY_USER") ?: artifactoryUser
                    password = System.getenv("ARTIFACTORY_PASSWORD") ?: artifactoryPassword
                }
            }
        }
        dependencies {
            classpath "org.ajoberstar:grgit:2+"
            classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
        }
    }
}

plugins {
    id 'scala'
    id "application"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "jacoco"
    id "java-library"
    id "com.adarshr.test-logger" version "1.3.0"
    id "org.scoverage" version  "4.0.2"
    id "maven-publish"
    id "idea"
    id "project-report"
}

group "${gradle.projectGroup}"
mainClassName = 'io.github.bkosaraju.pipeline.PipelineLauncher'

repositories {
    maven {
        url "${gradle.artifactoryUrl}"
        if (System.getenv("ARTIFACTORY_USER") || Project.hasProperty('artifactoryUser')) {
            credentials {
                username = System.getenv("ARTIFACTORY_USER") ?: artifactoryUser
                password = System.getenv("ARTIFACTORY_PASSWORD") ?: artifactoryPassword
            }
        }
    }
}

configurations {
    assembly
    compile.extendsFrom assembly
}

configurations {
    provided
    compile.extendsFrom provided
}

configurations {
    archivesBaseName = "${gradle.projectName}" + "_${scalaVariant}"

}

distributions {
    main {
        distributionBaseName = "${gradle.projectName}" + "_${scalaVariant}"
    }
}

dependencies {
    api group: 'org.scala-lang', name :'scala-library', version: "$scalaVariant"+'.12'

    //JDBC Dependencies
    api group: 'org.postgresql', name: 'postgresql', version: '42.2.6'

    //JDBI connection
    api group: 'org.jdbi', name: 'jdbi3-core', version: '3.10.1'
    api group: 'org.jdbi', name: 'jdbi3-postgres', version: '3.10.1'
    api group: 'org.jdbi', name: 'jdbi3-sqlobject', version: '3.10.1'
    api group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'

    //CLI for application
    api group: 'info.picocli', name: 'picocli', version: '3.9.5'

    //utils
    api group: 'io.github.bkosaraju', name: 'utils_'+"$scalaVariant", version: "$utilsVersion"

    //Prometheus
    api group: 'io.prometheus', name: 'simpleclient', version: "$prometheusVersion"
    api group: 'io.prometheus', name: 'simpleclient_pushgateway', version: "$prometheusVersion"
}


compileScala {
    scalaCompileOptions.additionalParameters = ["-feature"]
}

shadowJar {
    zip64 true
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
}
tasks.build.dependsOn tasks.shadowJar

test {
    useJUnit {}
    jvmArgs '-Xmx1024m'
    testLogging.showStandardStreams = true
    reports {
        junitXml.enabled = true
    }
}


testlogger {
    theme 'standard'
    showExceptions true
    slowThreshold 10000
    showSummary true
    showStandardStreams false
}

// def gitlogDir = new File( project.projectDir.toString() + '/.git')
// if (gitlogDir.exists()) {
//     apply from: 'ci/git.gradle'
//     apply from: 'ci/artifactory.gradle'
//     apply from: 'ci/sonatype.gradle'
// }
